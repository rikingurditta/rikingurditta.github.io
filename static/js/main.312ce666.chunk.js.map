{"version":3,"sources":["images/origami elephant cropped.jpg","images/eric_andre_keyboardist.png","pages/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","Container","fluid","Row","className","style","minHeight","Col","md","src","origami_elephant","alt","width","backgroundColor","textAlign","bio_pic","App","Navbar","fixed","expand","Brand","href","Nav","Link","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,sD,mBCA3CD,EAAOC,QAAU,IAA0B,oD,iQCO5B,SAASC,IACpB,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAKC,UAAU,4BAA4BC,MAAO,CAACC,UAAW,UAC1D,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGJ,UAAU,WAClB,sCACA,sFAEJ,kBAACG,EAAA,EAAD,CAAKC,GAAI,EAAGJ,UAAU,WAClB,yBAAKK,IAAKC,IACLC,IAAI,WACJN,MAAO,CAACO,MAAO,WAG5B,kBAACT,EAAA,EAAD,CAAKC,UAAU,4BAA4BC,MAAO,CAACC,UAAW,QAASO,gBAAiB,YACpF,kBAACN,EAAA,EAAD,CAAKC,GAAI,EAAGJ,UAAU,UAAUC,MAAO,CAACS,UAAW,SAC/C,yBAAKL,IAAKM,IAASJ,IAAI,eAE3B,kBAACJ,EAAA,EAAD,CAAKC,GAAI,EAAGJ,UAAU,WAClB,wCACA,wGAA6E,6BAA7E,sKCDLY,MAnBf,WACI,OACI,yBAAKZ,UAAU,OACX,kBAACa,EAAA,EAAD,CAAQC,MAAM,MAAMC,OAAO,MACvB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,SACA,kBAACC,EAAA,EAAD,CAAKlB,UAAU,WACX,kBAACkB,EAAA,EAAIC,KAAL,CAAUF,KAAK,SAAf,QACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,SAAf,UAGR,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOG,KAAK,IAAIC,UAAWzB,QCP3B0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.312ce666.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/origami elephant cropped.8ae59f43.jpg\";","module.exports = __webpack_public_path__ + \"static/media/eric_andre_keyboardist.a673340d.png\";","import React from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport origami_elephant from \"../images/origami elephant cropped.jpg\";\nimport bio_pic from \"../images/eric_andre_keyboardist.png\";\n\nexport default function Homepage() {\n    return (\n        <Container fluid>\n            <Row className=\"justify-content-md-center\" style={{minHeight: '100vh'}}>\n                <Col md={4} className=\"my-auto\">\n                    <h1>Hello!</h1>\n                    <h3>Welcome to my website! It's still under construction.</h3>\n                </Col>\n                <Col md={4} className=\"my-auto\">\n                    <img src={origami_elephant}\n                         alt=\"elephant\"\n                         style={{width: '75%'}}/>\n                </Col>\n            </Row>\n            <Row className=\"justify-content-md-center\" style={{minHeight: '100vh', backgroundColor: '#EEEEFF'}}>\n                <Col md={4} className=\"my-auto\" style={{textAlign: 'left'}}>\n                    <img src={bio_pic} alt=\"pic of me\"/>\n                </Col>\n                <Col md={4} className=\"my-auto\">\n                    <h1>About me</h1>\n                    <p>I'm a computer science and mathematics undergrad at University of Toronto.<br/>Hire me please!\n                        I am begging you. I'm not really qualified or anything but I can talk to you about underground\n                        hip hop artists, and I think that's pretty cool.\n                    </p>\n                </Col>\n            </Row>\n        </Container>\n    )\n}","import React from 'react';\nimport './App.scss';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Homepage from \"./pages/Homepage\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Navbar fixed=\"top\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\">Rikin</Navbar.Brand>\n                <Nav className=\"ml-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    <Nav.Link href=\"#link\">Link</Nav.Link>\n                </Nav>\n            </Navbar>\n            <Router>\n                <Switch>\n                    <Route path=\"/\" component={Homepage}/>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}